{
  // http://eslint.org/docs/rules/

  "parserOptions": {
    "ecmaVersion": 6,
    "sourceType": "module"
  },

  "env": {
    "browser": true,
    "node": true,
    "commonjs": true,
    "es6": true,
    "jasmine": true,
    "jquery": true
  },

  "globals": {
    "ko": true,
    "g": true,
    "gsoft": true,
    "spa": true,
    "httpService": true, 
    "PageViewModel": true,
    "moment": true
  },

  "rules": {
    ////////// Possible Errors //////////

    "comma-dangle": [ 2, "never" ], // disallow or enforce dangling commas
    "no-cond-assign": 2, // disallow assignment in conditional expressions
    "no-console": 0, // disallow use of console (off by default in the node environment)
    "no-constant-condition": 2, // disallow use of constant expressions in conditions
    "no-control-regex": 2, // disallow control characters in regular expressions
    "no-debugger": 1, // disallow use of debugger
    "no-dupe-args": 2,
    "no-dupe-keys": 2, // disallow duplicate keys when creating object literals
    "no-duplicate-case": 2,
    "no-empty": 2, // disallow empty statements
    "no-empty-character-class": 2, // disallow the use of empty character classes in regular expressions
    "no-ex-assign": 2, // disallow assigning to the exception in a catch block
    "no-extra-boolean-cast": 2, // disallow double-negation boolean casts in a boolean context
    "no-extra-parens": 2, // disallow unnecessary parentheses (off by default)
    "no-extra-semi": 2, // disallow unnecessary semicolons
    "no-func-assign": 2, // disallow overwriting functions written as function declarations
    "no-inner-declarations": 0, // disallow function or variable declarations in nested blocks
    "no-invalid-regexp": 1, // disallow invalid regular expression strings in the RegExp constructor
    "no-irregular-whitespace": 2, // disallow irregular whitespace outside of strings and comments
    "no-negated-in-lhs": 2, // disallow negation of the left operand of an in expression
    "no-obj-calls": 2, // disallow the use of object properties of the global object (Math and JSON) as functions
    "no-regex-spaces": 2, // disallow multiple spaces in a regular expression literal
    "no-sparse-arrays": 2, // disallow sparse arrays
    "no-unexpected-multiline": 2,
    "no-unreachable": 2, // disallow unreachable statements after a return, throw, continue, or break statement
    "use-isnan": 2, // disallow comparisons with the value NaN
    "valid-jsdoc": 0, // Ensure JSDoc comments are valid (off by default)
    "valid-typeof": 0, // Ensure that the results of typeof are compared against a valid string


    ////////// Best Practices //////////

    "accessor-pairs": 2,
    "array-callback-return": 2,
    "block-scoped-var": 2, // treat var statements as if they were block scoped (off by default)
    "complexity": 0, // specify the maximum cyclomatic complexity allowed in a program (off by default)
    "consistent-return": 0, // require return statements to either always or never specify values
    "curly": 2, // specify curly brace conventions for all control statements
    "default-case": 0, // require default case in switch statements (off by default)
    "dot-location": [ 2, "property" ],
    "dot-notation": 0, // encourages use of dot notation whenever possible
    "eqeqeq": 2, // require the use of === and !==
    "guard-for-in": 0, // make sure for-in loops have an if statement (off by default)
    "no-alert": 0, // disallow the use of alert, confirm, and prompt
    "no-caller": 2, // disallow use of arguments.caller or arguments.callee
    "no-case-declarations": 2,
    "no-div-regex": 2, // disallow division operators explicitly at beginning of regular expression (off by default)
    "no-else-return": 2, // disallow else after a return in an if (off by default)
    "no-empty-function": 2,
    "no-empty-pattern": 0,
    "no-eq-null": 2, // disallow comparisons to null without a type-checking operator (off by default)
    "no-eval": 2, // disallow use of eval()
    "no-extend-native": 2, // disallow adding to native types
    "no-extra-bind": 0, // disallow unnecessary function binding
    "no-fallthrough": 1, // disallow fallthrough of case statements
    "no-floating-decimal": 2, // disallow the use of leading or trailing decimal points in numeric literals (off by default)
    "no-implicit-coercion": 0,
    "no-implicit-globals": 2,
    "no-implied-eval": 2, // disallow use of eval()-like methods
    "no-invalid-this": 0,
    "no-iterator": 2, // disallow usage of __iterator__ property
    "no-labels": 2, // disallow use of labeled statements
    "no-lone-blocks": 2, // disallow unnecessary nested blocks
    "no-loop-func": 2, // disallow creation of functions within loops
    "no-magic-numbers": 0,
    "no-multi-spaces": 2, // disallow use of multiple spaces
    "no-multi-str": 2, // disallow use of multiline strings
    "no-native-reassign": 2, // disallow reassignments of native objects
    "no-new": 1, // disallow use of new operator when not part of the assignment or comparison
    "no-new-func": 2, // disallow use of new operator for Function object
    "no-new-wrappers": 2, // disallows creating new instances of String, Number, and Boolean
    "no-octal": 2, // disallow use of octal literals
    "no-octal-escape": 2, // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
    "no-param-reassign": [2, { "props": false }],
    "no-proto": 2, // disallow usage of __proto__ property
    "no-redeclare": 2, // disallow declaring the same variable more then once
    "no-return-assign": 2, // disallow use of assignment in return statement
    "no-script-url": 2, // disallow use of javascript: urls.
    "no-self-assign": 2,
    "no-self-compare": 2, // disallow comparisons where both sides are exactly the same (off by default)
    "no-sequences": 2, // disallow use of comma operator
    "no-throw-literal": 2,
    "no-unmodified-loop-condition": 0,
    "no-unused-expressions": 2, // disallow usage of expressions in statement position
    "no-unused-labels": 2,
    "no-useless-call": 0,
    "no-useless-concat": 0,
    "no-void": 2, // disallow use of void operator (off by default)
    "no-warning-comments": 0, // disallow usage of configurable warning terms in comments, e.g. TODO or FIXME (off by default)
    "no-with": 2, // disallow use of the with statement
    "radix": 0, // require use of the second argument for parseInt() (off by default)
    "vars-on-top": 0, // requires to declare all vars on top of their containing scope (off by default)
    "wrap-iife": [2, "inside"], // require immediate function invocation to be wrapped in parentheses (off by default)
    "yoda": 0, // require or disallow Yoda conditions


    ////////// Strict Mode //////////

    "strict": [ 2, "safe" ], // controls location of Use Strict Directives


    ////////// Variables //////////

    "init-declarations": [2, "always"],
    "no-catch-shadow": 2, // disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
    "no-delete-var": 2, // disallow deletion of variables
    "no-label-var": 2, // disallow labels that share a name with a variable
    "no-restricted-globals": 0,
    "no-shadow": 2, // disallow declaration of variables already declared in the outer scope
    "no-shadow-restricted-names": 2, // disallow shadowing of names such as arguments
    "no-undef": 2, // disallow use of undeclared variables unless mentioned in a /*global */ block
    "no-undef-init": 2, // disallow use of undefined when initializing variables
    "no-undefined": 0, // disallow use of undefined variable (off by default)
    "no-unused-vars": 2, // disallow declaration of variables that are not used in the code
    "no-use-before-define": 2, // disallow use of variables before they are defined


    ////////// Node.js //////////

    "callback-return": 0,
    "global-require": 0,
    "handle-callback-err": 0, // enforces error handling in callbacks (off by default) (on by default in the node environment)
    "no-mixed-requires": 0, // disallow mixing regular variable and require declarations (off by default) (on by default in the node environment)
    "no-new-require": 0, // disallow use of new operator with the require function (off by default) (on by default in the node environment)
    "no-path-concat": 0, // disallow string concatenation with __dirname and __filename (off by default) (on by default in the node environment)
    "no-process-env": 0,
    "no-process-exit": 0, // disallow process.exit() (on by default in the node environment)
    "no-restricted-modules": 0, // restrict usage of specified node modules (off by default)
    "no-sync": 0, // disallow use of synchronous methods (off by default)


    ////////// Stylistic Issues //////////

    "array-bracket-spacing": [2, "never"],
    "block-spacing": [2, "always"],
    "brace-style": [2, "stroustrup", { "allowSingleLine": true }], // enforce one true brace style (off by default)
    "camelcase": [2, {"properties": "always"}], // require camel case names
    "comma-spacing": [2, {"before": false, "after": true}], // enforce spacing before and after comma
    "comma-style": [2, "last"], // enforce one true comma style (off by default)
    "computed-property-spacing": [2, "never"],
    "consistent-this": [2, "that"], // enforces consistent naming when capturing the current execution context (off by default)
    "eol-last": 0, // enforce newline at the end of file, with no multiple empty lines
    "func-names": 0, // require function expressions to have a name (off by default)
    "func-style": 0, // enforces use of function declarations or expressions (off by default)
    "id-blacklist": 0,
    "id-length": 0,
    "id-match": 0,
    "indent": 2,
    "jsx-quotes": [2, "prefer-double"],
    "key-spacing": [2, {"beforeColon": false, "afterColon": true}], // enforces spacing between keys and values in object literal properties
    "keyword-spacing": [2, {"before": false, "after": true, "overrides": {}}],
    "linebreak-style": [2, "windows"],
    "lines-around-comment": 0,
    "max-depth": 0,
    "max-len": 0,
    "max-nested-callbacks": 0, // specify the maximum depth callbacks can be nested (off by default)
    "max-params": 0,
    "max-statements": 0,
    "new-cap": 2, // require a capital letter for constructors
    "new-parens": 2, // disallow the omission of parentheses when invoking a constructor with no arguments
    "newline-after-var": 0,
    "newline-before-return": "error",
    "newline-per-chained-call": 0,
    "no-array-constructor": 2, // disallow use of the Array constructor
    "no-bitwise": 2,
    "no-continue": 2,
    "no-inline-comments": 2, // disallow comments inline after code (off by default)
    "no-lonely-if": 0, // disallow if as the only statement in an else block (off by default)
    "no-mixed-spaces-and-tabs": [2, "smart-tabs"], // disallow mixed spaces and tabs for indentation
    "no-multiple-empty-lines": 2, // disallow multiple empty lines (off by default)
    "no-negated-condition": 0,
    "no-nested-ternary": 0, // disallow nested ternary expressions (off by default)
    "no-new-object": 2, // disallow use of the Object constructor
    "no-plusplus": 0, // disallow use of unary operators, ++ and -- (off by default)
    "no-restricted-syntax": 0,
    "no-spaced-func": 2, // disallow space between function identifier and application
    "no-ternary": 0, // disallow the use of ternary operators (off by default)
    "no-trailing-spaces": 0, // disallow trailing whitespace at the end of lines
    "no-underscore-dangle": 0, // disallow dangling underscores in identifiers
    "no-unneeded-ternary": 0,
    "no-whitespace-before-property": 2,
    "object-curly-spacing": 0,
    "one-var": [2, "never"], // allow just one var statement per function (off by default)
    "one-var-declaration-per-line": 0,
    "operator-assignment": 0, // require assignment operator shorthand where possible or prohibit it entirely (off by default)
    "operator-linebreak": [2, "after"],
    "padded-blocks": [2, { "blocks": "never", "switches": "never", "classes": "never" }], // enforce padding within blocks (off by default)
    "quote-props": 0, // require quotes around object literal property names (off by default)
    "quotes": [2, "double", "avoid-escape"], // specify whether double or single quotes should be used
    "require-jsdoc": 0,
    "semi": [2, "always"], // require or disallow use of semicolons instead of ASI
    "semi-spacing": 0,
    "sort-imports": 0,
    "sort-vars": 0, // sort variables within the same declaration block (off by default)
    "space-before-blocks": [2, "always"], // require or disallow space before blocks (off by default)
    "space-before-function-paren": [2, "never"],
    "space-in-parens": [2, "never"], // require or disallow spaces inside parentheses (off by default)
    "space-infix-ops": 2, // require spaces around operators
    "space-unary-ops": 2, // Require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
    "spaced-comment": [2, "always"], // require or disallow a space immediately following the // in a line comment (off by default)
    "wrap-regex": 0, // require regex literals to be wrapped in parentheses (off by default)


    ////////// ECMAScript 6 //////////

    "no-var": 0, // require let or const instead of var (off by default)
    "generator-star": 0 // enforce the position of the * in generator functions (off by default)
  }
}